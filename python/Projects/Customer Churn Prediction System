# Customer Churn Prediction System

# ✅ 1. Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
import joblib

# ✅ 2. Load the dataset
df = pd.read_csv(r'C:\Users\Sajjad_Lab\Downloads\Telco-Customer-Churn.csv')

# ✅ 3. Data Cleaning & Preprocessing

# Convert 'Churn' to binary
df['Churn'] = df['Churn'].map({'No': 0, 'Yes': 1})

# Drop missing values
df = df.dropna()

# Drop customerID column
df = df.drop(['customerID'], axis=1)

# One-hot encode categorical variables
df = pd.get_dummies(df, drop_first=True)

# ✅ 4. Train-test split
X = df.drop('Churn', axis=1)
y = df['Churn']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ✅ 5. Train Logistic Regression
lr_model = LogisticRegression(max_iter=5000)
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)
y_prob_lr = lr_model.predict_proba(X_test)[:, 1]

# ✅ 6. Train Random Forest
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
y_prob_rf = rf_model.predict_proba(X_test)[:, 1]

# ✅ 7. Evaluation
print("Logistic Regression Report:")
print(classification_report(y_test, y_pred_lr))
print("ROC-AUC:", roc_auc_score(y_test, y_prob_lr))

print("\nRandom Forest Report:")
print(classification_report(y_test, y_pred_rf))
print("ROC-AUC:", roc_auc_score(y_test, y_prob_rf))

# ✅ 8. Confusion Matrix for Logistic Regression
conf_matrix = confusion_matrix(y_test, y_pred_lr)
plt.figure(figsize=(6, 4))
plt.imshow(conf_matrix, interpolation='nearest', cmap='Blues')
plt.title("Confusion Matrix - Logistic Regression")
plt.colorbar()
classes = ['Not Churned', 'Churned']
plt.xticks([0, 1], classes)
plt.yticks([0, 1], classes)

# Label the boxes
thresh = conf_matrix.max() / 2
for i in range(2):
    for j in range(2):
        plt.text(j, i, format(conf_matrix[i, j], 'd'),
                 ha='center', va='center',
                 color='white' if conf_matrix[i, j] > thresh else 'black')
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.tight_layout()
plt.show()

# ✅ 9. ROC Curve Comparison
fpr_lr, tpr_lr, _ = roc_curve(y_test, y_prob_lr)
fpr_rf, tpr_rf, _ = roc_curve(y_test, y_prob_rf)

plt.figure()
plt.plot(fpr_lr, tpr_lr, label='Logistic Regression (AUC = {:.2f})'.format(roc_auc_score(y_test, y_prob_lr)))
plt.plot(fpr_rf, tpr_rf, label='Random Forest (AUC = {:.2f})'.format(roc_auc_score(y_test, y_prob_rf)))
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve Comparison')
plt.legend(loc='lower right')
plt.grid()
plt.show()

# ✅ 10. Save Best Model
joblib.dump(rf_model, 'random_forest_churn_model.pkl')
